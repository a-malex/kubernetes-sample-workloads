apiVersion: apps/v1
kind: StatefulSet

metadata:
  name: mysql-statefulset

spec:
  selector:
    matchLabels:
      app.kubernates.io/app: mysql-app
  replicas: 3
  template:
    metadata:
      name: mysql-pod
      labels:
        app.kubernates.io/app: mysql-app
    spec:
      containers:
        - name: mysql-container
          image: mysql:8
          #######################
          envFrom:
            - configMapRef:
              name: mysql-config
            - secretRef:
              name: mysql-secret
          #######################
          volumeMounts:
            - name: data
              mountPath: /data        
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
  serviceName: redis-headless

---
# use volume to load all configs in file as volume
apiVersion: v1
kind: Pod
metadata:
  name: alpine-pod
spec:
  containers:
    - name: alpine-pod
      image: alpine
      command: ["sleep", "1000"]
      volumeMounts:
        - name: ansible-config-volume
          mountPath: /ansible
  volumes:
    - name: ansible-config-volume
      configMap:
        name: andible-cfg

---
apiVersion: v1
kind: Pod
metadata:
  name: alpine-pod
spec:
  containers:
    - name: alpine-pod
      image: alpine
      command:
        - printenv
      env:
        - name: MY_APP_PORT
          valueFrom:
            configMapKeyRef:
              name: test-config
              key: APP_PORT

---
apiVersion: v1
kind: Pod
metadata:
  name: alpine-pod
spec:
  containers:
    - name: alpine-pod
      image: alpine
      command:
        - printenv
      envFrom:
        - configMapKeyRef:
              name: test-config

---
apiVersion: v1
kind: Pod
metadata:
  name: alpine-pod
spec:
  containers:
    - name: alpine-pod
      image: alpine
      command:
        - echo
        - $(APP_PORT)
      envFrom:
        - configMapKeyRef:
              name: test-config
